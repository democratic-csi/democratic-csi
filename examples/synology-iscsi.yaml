driver: synology-iscsi
httpConnection:
  protocol: http
  host: server address
  port: 5000
  username: admin
  password: password
  allowInsecure: true
  # should be uniqe across all installs to the same nas
  session: "democratic-csi"
  serialize: true

# Choose the DSM volume this driver operates on. The default value is /volume1.
# synology:
#   volume: /volume1

iscsi:
  targetPortal: "server[:port]"
  # for multipath
  targetPortals: [] # [ "server[:port]", "server[:port]", ... ]
  # leave empty to omit usage of -I with iscsiadm
  interface: ""
  # can be whatever you would like
  baseiqn: "iqn.2000-01.com.synology:csi."

  # MUST ensure uniqueness
  # full iqn limit is 223 bytes, plan accordingly
  namePrefix: ""
  nameSuffix: ""

  # documented below are several blocks
  # pick the option appropriate for you based on what your backing fs is and desired features
  # you do not need to alter dev_attribs under normal circumstances but they may be altered in advanced use-cases
  # These options can also be configured per storage-class:
  # See https://github.com/democratic-csi/democratic-csi/blob/master/docs/storage-class-parameters.md
  lunTemplate:
    # can be static value or handlebars template
    #description: "{{ parameters.[csi.storage.k8s.io/pvc/namespace] }}-{{ parameters.[csi.storage.k8s.io/pvc/name] }}"
    
    # btrfs thin provisioning
    type: "BLUN"
    # tpws = Hardware-assisted zeroing
    # caw = Hardware-assisted locking
    # 3pc = Hardware-assisted data transfer
    # tpu = Space reclamation
    # can_snapshot = Snapshot
    #dev_attribs:
    #- dev_attrib: emulate_tpws
    #  enable: 1
    #- dev_attrib: emulate_caw
    #  enable: 1
    #- dev_attrib: emulate_3pc
    #  enable: 1
    #- dev_attrib: emulate_tpu
    #  enable: 0
    #- dev_attrib: can_snapshot
    #  enable: 1

    # btfs thick provisioning
    # only zeroing and locking supported
    #type: "BLUN_THICK"
    # tpws = Hardware-assisted zeroing
    # caw = Hardware-assisted locking
    #dev_attribs:
    #- dev_attrib: emulate_tpws
    #  enable: 1
    #- dev_attrib: emulate_caw
    #  enable: 1

    # ext4 thinn provisioning UI sends everything with enabled=0
    #type: "THIN"

    # ext4 thin with advanced legacy features set
    # can only alter tpu (all others are set as enabled=1)
    #type: "ADV"
    #dev_attribs:
    #- dev_attrib: emulate_tpu
    #  enable: 1

    # ext4 thick
    # can only alter caw
    #type: "FILE"
    #dev_attribs:
    #- dev_attrib: emulate_caw
    #  enable: 1

  lunSnapshotTemplate:
    is_locked: true
    # https://kb.synology.com/en-me/DSM/tutorial/What_is_file_system_consistent_snapshot
    is_app_consistent: true

  targetTemplate:
    auth_type: 0
    max_sessions: 0

storageClasses: 
# Choose a unique and descriptive name for your storage class. Multiple storage classes can be defined.
- name: "" 
  defaultClass: false
  # reclaimPolicy should be Retain (if you want PVs and data preserved when PVC is deleted) or Delete (if you want everything deleted)
  reclaimPolicy: Retain
  volumeBindingMode: Immediate
  allowVolumeExpansion: true
  # parameters can be used to overide values defined in the iscsi section
  # parameters:
    # for block-based storage can be ext3, ext4, xfs
    # for nfs should be nfs
    # fsType: ext4
    # lunTemplate: |
    #   type: BLUN
    #   description: LUN for k8s
  # secrets are only needed if you are using CHAP
  secrets:
    provisioner-secret:
      # Values under targetTemplate will be merged with the values defined under targetTemplate in the iscsi section
      # CHAP
      # targetTemplate: |
      #   auth_type: 1
      #   max_sessions: 0
      #   chap: true
      #   user: **************
      #   password: **************

      # Mutual CHAP
      targetTemplate: |
        auth_type: 2
        max_sessions: 0
        chap: true
        mutual_chap: true
        user: **************
        password: **************
        mutual_user: **************
        mutual_password: **************
    node-stage-secret:
      # CHAP
      node-db.node.session.auth.authmethod: CHAP
      node-db.node.session.auth.username: **************
      node-db.node.session.auth.password: **************
      # Mutual CHAP
      node-db.node.session.auth.username_in: **************
      node-db.node.session.auth.password_in: **************